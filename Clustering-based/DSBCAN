import numpy as np
import cv2
from PIL import Image
from sklearn.cluster import DBSCAN
from matplotlib import pyplot as plt

# Load and resize the image
I = Image.open('/content/Virgo.jpg')
I = I.resize((200, 200))  # Resize for demonstration
I.save('/content/resized.png')
I = np.array(I) / 255.0  # Normalize to [0, 1]

# Reshape the image into a 2D array where each row is a pixel and columns are color channels
[M, N, C] = I.shape
X = I.reshape((-1, C))  # X will be an (M*N, C) array

# Apply DBSCAN
dbscan = DBSCAN(eps=0.005, min_samples=3)  # Adjust epsilon and min_samples as needed
labels = dbscan.fit_predict(X)

# Reshape labels back to the original image shape
L = labels.reshape((M, N))

# Create a segmented image by assigning a color to each label
# Create a color map with distinct colors for each cluster
unique_labels = np.unique(L)
colors = plt.cm.get_cmap('rainbow', len(unique_labels))

segmented_image = np.zeros((M, N, 3))
for i, label in enumerate(unique_labels):
    mask = L == label
    segmented_image[mask] = colors(i)[:3]  # Apply the color to the segmented area

# Convert segmented image to 8-bit format for saving
segmented_image_8bit = (segmented_image * 255).astype(np.uint8)

# Save the segmented image
segmented_image_pil = Image.fromarray(segmented_image_8bit)
segmented_image_pil.save('/content/segmented_image.png')

# Plotting
plt.figure(figsize=(12, 6))

plt.subplot(1, 3, 1)
plt.imshow(I)
plt.title('Original Image')
plt.axis('off')

plt.subplot(1, 3, 2)
plt.imshow(L, cmap='rainbow')
plt.title('DBSCAN Clustering')
plt.axis('off')

plt.subplot(1, 3, 3)
plt.imshow(segmented_image)
plt.title('Segmented Image')
plt.axis('off')

plt.show()
