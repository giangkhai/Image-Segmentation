import cv2
import numpy as np
from scipy.cluster.hierarchy import dendrogram, linkage
from scipy.ndimage import gaussian_filter
from skimage.transform import rescale
from sklearn.feature_extraction.image import grid_to_graph
from sklearn.cluster import AgglomerativeClustering
import time
import matplotlib.pyplot as plt

# Load the image and convert to grayscale
image_path = '/content/M35.jpg'  # Change the path according to your image
orig_coins = cv2.imread(image_path)
orig_coins = cv2.cvtColor(orig_coins, cv2.COLOR_BGR2GRAY)

# Apply Gaussian filter to smooth before resizing
smoothened_coins = gaussian_filter(orig_coins, sigma=2)

# Rescale the image to 20% of the original size to speed up processing
rescaled_coins = rescale(
    smoothened_coins,
    0.2,
    mode="reflect",
    anti_aliasing=False,
)

# Convert the image to a 2D array for clustering
X = np.reshape(rescaled_coins, (-1, 1))

# Create connectivity for clustering
connectivity = grid_to_graph(*rescaled_coins.shape)

# Perform hierarchical clustering
n_clusters = 150  # Number of clusters
ward = AgglomerativeClustering(
    n_clusters=n_clusters, linkage="ward", connectivity=connectivity
)

# Compute clustering and assign labels to pixels
st = time.time()
ward.fit(X)
label = np.reshape(ward.labels_, rescaled_coins.shape)
print(f"Elapsed time: {time.time() - st:.3f}s")
print(f"Number of pixels: {label.size}")
print(f"Number of clusters: {np.unique(label).size}")

# Display the segmented image
plt.figure(figsize=(5, 5))
plt.imshow(rescaled_coins, cmap=plt.cm.gray)
for l in range(n_clusters):
    plt.contour(
        label == l,
        colors=[plt.cm.nipy_spectral(l / float(n_clusters))],
    )
plt.axis("off")

# Save the segmented image
output_path = '/content/segmented_image.png'  # Path to save the segmented image
plt.savefig(output_path, bbox_inches='tight', pad_inches=0, transparent=True)
plt.close()

print(f"Segmented image saved to {output_path}")

# Create linkage for dendrogram
Z = linkage(X, method='ward')

# Plot dendrogram
plt.figure(figsize=(10, 7))
dendrogram(Z, truncate_mode='level', p=5)  # You can adjust truncate_mode and p as needed
plt.title('Dendrogram for the clustered image')
plt.xlabel('Sample index or (cluster size)')
plt.ylabel('Distance')
dendrogram_path = '/content/dendrogram.png'
plt.savefig(dendrogram_path, bbox_inches='tight', pad_inches=0, transparent=True)
plt.close()

print(f"Dendrogram saved to {dendrogram_path}")
