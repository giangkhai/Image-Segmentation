import cv2
import numpy as np
import matplotlib.pyplot as plt
import skfuzzy as fuzz

# Define the display function (from previous discussion)
def display(*args):
    num_x = 1 + args[2][1]
    if len(args) >= 4:
        fig, axes = plt.subplots(num_x, len(args[0]), figsize=(args[3][0], args[3][1]))
    else:
        fig, axes = plt.subplots(num_x, len(args[0]), figsize=(5 * len(args[0]), 5 * num_x))

    for i in range(len(args[0])):
        j = 0
        if num_x == 1:
            axes[i].imshow(args[0][i], cmap='gray', vmin=0, vmax=255)
            axes[i].set_title(args[1][i] if len(args) >= 2 else f"Image {i + 1}")
            axes[i].axis('off')
        else:
            axes[j][i].imshow(args[0][i], cmap='gray', vmin=0, vmax=255)
            axes[j][i].set_title(args[1][i] if len(args) >= 2 else f"Image {i + 1}")
            axes[j][i].axis('off')

            if args[2][1] == 1:
                j += 1
                f = np.fft.fft2(args[0][i])
                fshift = np.fft.fftshift(f)
                magnitude_spectrum = 20 * np.log(np.abs(fshift))
                axes[j][i].imshow(magnitude_spectrum, cmap='gray')
                axes[j][i].set_title('Magnitude spectrum ' + (args[1][i] if len(args) >= 2 else f"Image {i + 1}"))
                axes[j][i].axis('off')

    fig.tight_layout()
    plt.show()

# Load the image
image = cv2.imread('/content/crab.jpg')
img   = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Convert the image to a 1D array
pixel_values = image.reshape((-1, 1))
pixel_values = np.float32(pixel_values)

# Number of clusters to try
num_clusters_list = [2, 3, 4, 5]

# Prepare lists for images and titles
images = [img, image]
titles = ['Original','Original grayscale']

for n_clusters in num_clusters_list:
    # Perform Fuzzy C-means clustering
    cntr, u, u0, d, jm, p, fpc = fuzz.cluster.cmeans(
        pixel_values.T, n_clusters, 2, error=0.005, maxiter=1000, init=None)

    # Find the cluster with the highest membership for each pixel
    cluster_membership = np.argmax(u, axis=0)

    # Reshape back to image format
    clustered_image = cluster_membership.reshape(image.shape)
    clustered_image = clustered_image * 255 / (n_clusters - 1)
    # Add the clustered image and its title
    images.append(clustered_image)
    titles.append(f'c = {n_clusters}')

# Display images
display_options = [1, 0]  
fig_size = (5 * len(images), 5)
display(images, titles, display_options, fig_size)
