import numpy as np
import matplotlib.pyplot as plt
from skimage import io, color, measure
from skimage.segmentation import relabel_sequential
import cv2
# Load and preprocess the image
image_path = '/content/cloud.jpg'
image = io.imread(image_path)
image = cv2.resize(image, (200, 200))
image = np.array(image) / 255.0  # Normalize to [0, 1]
image_gray = color.rgb2gray(image)  # Convert to grayscale

# Binarize the image
binary_image = image_gray > 0.5  # Threshold value can be adjusted

# Compute the connected component tree
labeled_image, num_labels = measure.label(binary_image, connectivity=2, return_num=True)
labeled_image = relabel_sequential(labeled_image)[0]  # Relabel and get only the relabeled image

# Create a color image for visualization
colored_labels = np.zeros((labeled_image.shape[0], labeled_image.shape[1], 3))
for label in np.unique(labeled_image):
    if label == 0:
        continue  # Skip the background
    mask = labeled_image == label
    colored_labels[mask] = np.random.rand(3)  # Assign random color to each component

# Ensure image is in the correct format for display
image_display = np.clip(image, 0, 1)  # Clip values to the range [0, 1] for display

# Calculate cost and F values (based on a simple approach for demonstration)
alpha = 0.5  # Example alpha value, adjust as needed
cost = np.zeros_like(labeled_image, dtype=float)
F = np.zeros_like(labeled_image, dtype=int)

for v in np.unique(labeled_image):
    if v == 0:
        continue  # Skip the background
    mask = labeled_image == v
    n_G = np.sum(binary_image[mask])
    ps_G = np.sum(~binary_image[mask])
    if alpha * n_G < (1 - alpha) * ps_G:
        cost[labeled_image == v] = alpha * n_G
        F[labeled_image == v] = v
    else:
        cost[labeled_image == v] = (1 - alpha) * ps_G
        F[labeled_image == v] = 0

# Display the results
plt.figure(figsize=(15, 5))

plt.subplot(1, 3, 1)
plt.imshow(image_display)  # Ensure image is in correct format
plt.title('Original')
plt.axis('off')

plt.subplot(1, 3, 2)
plt.imshow(binary_image, cmap='gray')
plt.title('Binary')
plt.axis('off')

plt.subplot(1, 3, 3)
plt.imshow(colored_labels)
plt.title(f'cc-tree Î±={alpha}')
plt.axis('off')

plt.show()
