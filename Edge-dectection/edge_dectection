# Read the original image
image_path = "/content/tvdb.jpg"
image = cv2.imread(image_path)
img   = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
if image is None:
    raise FileNotFoundError(f"Image not found at path: {image_path}")

# Convert the image to grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
#1.1 Sobel_x
sobel_x = cv2.Sobel(gray, cv2.CV_64F, 1, 0, ksize=3)
sobel_x = cv2.normalize(sobel_x, None, 0, 255, cv2.NORM_MINMAX)
sobel_x = np.uint8(sobel_x)
#1.2 Sobel_y
sobel_y = cv2.Sobel(gray, cv2.CV_64F, 0, 1, ksize=3)
sobel_y = cv2.normalize(sobel_y, None, 0, 255, cv2.NORM_MINMAX)
sobel_y = np.uint8(sobel_y)
#2.1 Prewitt_x
prewitt_x = np.array([[-1, 0, 1], [-1, 0, 1], [-1, 0, 1]])
prewitt_x_edges = cv2.filter2D(gray, cv2.CV_64F, prewitt_x)
prewitt_x_edges = cv2.normalize(prewitt_x_edges, None, 0, 255, cv2.NORM_MINMAX)
prewitt_x_edges = np.uint8(prewitt_x_edges)
#2.2 Prewitt_y
prewitt_y = np.array([[-1, -1, -1], [0, 0, 0], [1, 1, 1]])
prewitt_y_edges = cv2.filter2D(gray, cv2.CV_64F, prewitt_y)
prewitt_y_edges = cv2.normalize(prewitt_y_edges, None, 0, 255, cv2.NORM_MINMAX)
prewitt_y_edges = np.uint8(prewitt_y_edges)
#3. Canny
low_threshold = 50
high_threshold = 150
canny_edges = cv2.Canny(gray, low_threshold, high_threshold)
display([img, gray, canny_edges,sobel_x, sobel_y, prewitt_x_edges, prewitt_y_edges], ["Original", "Original grayscale", "Canny","Sobel x", "Sobel y", "Prewitt x", "Prewitt y"], (1, 0))
